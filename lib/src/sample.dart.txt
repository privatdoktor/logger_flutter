import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:io';
import 'dart:convert';

import 'package:path_provider/path_provider.dart';

import 'package:logger/logger.dart';
import 'package:logger_flutter/logger_flutter.dart';
import 'package:logger/src/outputs/file_output.dart'; // conditional import. Broken in Dart 2?

Directory _applicationDocumentsDirectory;
File _loggingFile;

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // wait for flutter to initialise
  await _initialiseApplicationDocumentsDirectory(); // now we can call function to get the local directory

  _loggingFile = _getLocalFile("logger.out");
  print("_localFile: $_loggingFile");

  runApp(MyApp());

  log();
}

// This function needs to be called at initialisation time
//
Future<String> _initialiseApplicationDocumentsDirectory() async {
  final directory =
  await getExternalStorageDirectory(); // get the public path.  getApplicationDocumentsDirectory() returns a private path
  print("directory: $directory");

  _applicationDocumentsDirectory = directory; // save away for sync access

  return directory.path;
}

File _getLocalFile(String filename) {
  //final path = await _initialiseApplicationDocumentsDirectory();
  //print("path: $path");

  return File('${_applicationDocumentsDirectory.path}/$filename');
}

var logger = Logger(
  printer: PrettyPrinter(
    printBox: false,
    printTime: true,
  ),
);

var loggerNoStack = Logger(
  printer: PrettyPrinter(methodCount: 0, printBox: false),
);

var loggerMulti = Logger(
  output: MultiOutput([
    ConsoleOutput(),
    ConsoleLogOutput(),
    //ConsoleOutputPlusConsoleLogOutput(),
    FileOutput(
      file: _loggingFile,
      overrideExisting: true,
    ),
  ]),
  printer: PrettyPrinter(
    printBox: false,
    printTime: true,
  ),
  filter: ProductionFilter(),
);

void log() {
  logger.d("Log message with 2 methods");

  loggerNoStack.i("Info message");

  loggerNoStack.w("Just a warning!");

  logger.e("Error! Something bad happened", "Test Error");

  loggerNoStack.v({"key": 5, "value": "something"});

  loggerMulti.i("Log message to console and file");

  //var systemTempDir = Directory.systemTemp;
  // List directory contents, recursing into sub-directories,
  // but not following symbolic links.
  _applicationDocumentsDirectory
      .list(recursive: true, followLinks: false)
      .listen((FileSystemEntity entity) {
    if (entity is File) {
      loggerNoStack.i("${entity.path} ${entity.lengthSync()}");
    }
  });

  // print to debug the contents of the logging file
  _loggingFile
      .openRead()
      .transform(utf8.decoder)
      .transform(LineSplitter())
      .forEach((l) => print('line: $l'));

  Future.delayed(Duration(seconds: 10), log);
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      routes: <String, WidgetBuilder>{
        "home": (context) => HomeWidget(),
      },
      initialRoute: "home",
    );
  }
}

class HomeWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          LogConsoleOnShake(
            dark: true,
            child: Center(
              child: Text("Shake Phone to open console."),
            ),
          ),
          TextButton(
            onPressed: () => LogConsole.open(context),
            child: Text("or click here to open console."),
          )
        ],
      ),
    );
  }
}

// Convenience class method for single output loggers
//
class ConsoleOutputPlusConsoleLogOutput extends ConsoleOutput {
  @override
  void output(OutputEvent event) {
    super.output(event);
    LogConsole.add(event);
  }
}

// Dedicated class method for multi output loggers
//
class ConsoleLogOutput extends LogOutput {
  @override
  void output(OutputEvent event) {
    LogConsole.add(event);
  }
}
